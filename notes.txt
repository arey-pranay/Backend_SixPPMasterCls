Backend Engineer has to create seperate APIs for each task, Like one for Creating, One for Reading, One for Updating, etc etc. And also authentication.
Backend has Servers, Database and APIs.

We can also get the route by taking req.url in
const http = require("https"); 
http.createServer((req,res)=>{
  if(req.url==="contact"){
    alert("Contact Page)
  }
})

earlier,
in secondFilee.js
  const a = 10;
  module.exports = a
in index.js
  const a = require("./secondFilee")

nowadays modern,
in secondFilee.js
  const a =10;
  export default a;
in index.js 
  import a from "./secondFilee.js"

earlier "commonjs" type was used for transferring data, and in that we use module.exports and require("")
But in Modern JS and its frontend frameworks we often use the "module" type where we write export and import, 
and to achieve that in backend, edit the package.json and write "type": "module"

for more other exports, you need to export {b,c} as you can not make more than 1 default export for a file 
and while importing, you need to import {b,c}. 
If it's not default export then you need to have the same name while importing because they are stored like that in system or/ envrm

there are 4 methods
Post, Get, Put, Delete for CRUD opn respctvly

import express from "express"
const app = express();

app.get("/contact",(req,res)=>{
  res.json({
    id: 1,
    page: "contactPages"
  })
})

you can also import path from "path"
and then app.use(express.static(path.join(path.resolve(),"additional route")))

Creating frontend with node.js
We use ejs for this, it is similar to HTML but it has the power of using and creating variables too.

Databases

We send data from our backend to one of the collections of our database. The entry of one data is called Document.
Mongoose is used to connect mongodb and node.js
A collection is called a model in code and
A document is called a schema. It represents the comprising unit of a model or collection.


mongoose.connect("mongodb://127.0.0.1:27017",{
  dbName:"backendlearning"
}).then(()=>{console.log("Database Connected")}).catch((err)=>{console.log(err)})
(get this data from MongoDB atlas)

const msgSchema = new mongoose.Schema({
  name: String,
  email: String
})

const Messages = mongoose.Model("Messages",msgSchema)

app.get("/add",async (req,res)=>{
  await Messages.create({name: "Pranay", email: "pranayparikh2004@gmail.com"})
})

to work with cookies, we use cookie-parser and app.use(cookieParser());

We use the next when we want to go the next handler. There can be multiple handlers and we can create middlewares to to multiple things on a route or smthng
app.get("/", isAuthenticated, (req,res)=>{
  res.render("logout")
})
const isAuthenticated = (req,res,next)=>{
  const {token} = req.cookies;
  if(token){
    next();
  }else{
    res.render(login")
  }
}

we use jsonwebtoken 
const token = jwt.sign({_id:user._id},"secretrandomm")